name: Lambda and API Gateway Deployment with Tests

on:
  push:
    branches:
      - main   # Trigger deployment on push to the main branch

jobs:
  # Job for running unit, security, and performance tests before deployment
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          cd CHANGI_BACKEND
          pip install -r lambda-layer/requirements.txt
          pip install pytest

      # Step 4: Run Unit Tests (with pytest)
      - name: Run Unit Tests
        run: |
          pytest CHANGI_BACKEND/tests > unit-test-report.txt

      # Step 5: Upload Unit Test Results
      - name: Upload Unit Test Results
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-report
          path: unit-test-report.txt

      # Step 6: Install Bandit for Security Testing
      - name: Install Bandit
        run: |
          pip install bandit

      # Step 7: Run Bandit Security Scan
      - name: Run Bandit Security Scan
        run: |
          cd CHANGI_BACKEND
          bandit -r . --exclude lambda-layer,tests -f json -o bandit-report.json

      # Step 8: Upload Bandit Security Report
      - name: Upload Bandit Security Report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json

  # Build and Deploy Job
  build-deploy:
    runs-on: ubuntu-latest
    needs: test  # The deploy job depends on the test job

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install AWS CLI and SAM CLI
      - name: Install AWS CLI and SAM CLI
        run: |
          sudo apt-get update
          sudo apt-get install awscli -y
          pip install aws-sam-cli

      # Step 4: Install dependencies for the Lambda Layer
      - name: Install Lambda Layer dependencies
        run: |
          cd CHANGI_BACKEND/lambda-layer
          pip install -r requirements.txt -t python  # Install dependencies into python/ folder
          cd ..

      # Step 5: Build the AWS SAM project
      - name: Build the project
        run: |
          cd CHANGI_BACKEND
          sam build

      # Step 6: Deploy the Lambda and API Gateway
      - name: Deploy Lambda and API Gateway
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-southeast-1
        run: |
          cd CHANGI_BACKEND
          sam deploy --no-confirm-changeset --capabilities CAPABILITY_IAM --stack-name flask-lambda-api --guided

      # Step 7: Extract the API Gateway URL
      - name: Extract API Gateway URL
        id: extract-url
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name flask-lambda-api \
            --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" \
            --output text)
          echo "::set-output name=api_url::$API_URL"
      
  # Performance Testing Job using Locust
  performance:
    runs-on: ubuntu-latest
    needs: build-deploy

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install Locust for Performance Testing
      - name: Install Locust
        run: |
          pip install locust

      # Step 4: Define Locust Performance Test
      - name: Create Locustfile
        run: |
          echo "
          from locust import HttpUser, task, between
          class MyUser(HttpUser):
              wait_time = between(1, 5)
              @task
              def test_process_data(self):
                  self.client.post('/process-data', json={'input': 'Sample data'})
          " > locustfile.py

      # Step 5: Run Locust Performance Test using the extracted API Gateway URL
      - name: Run Locust Performance Test
        run: |
          locust --headless -u 10 -r 2 -t 30s --host ${{ steps.extract-url.outputs.api_url }}
